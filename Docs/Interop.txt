
Right now there are a few helpers for interoperability with the JavaScript world.

== Attributes ==

*JsImport* is an attribute that you use to declare a JavaScript implementation of a method. For example:

class Example1 {
	[JsImport("Math.pow")]
	public static extern double Pow(double a, double b);
}

Example.Pow1 is now assigned an implementation, Math.pow, which means that Math.pow will be called whenever Example1.Pow is invoked. 

You can also provide an actual function body:

class Example2 {
	[JsImport("function(a, b) { return Math.pow(a, b) }")]
	public static extern double Pow(double a, double b);
}

The method body declared in the string to JsImport is emited as-is into the resulting JavaScript. 
This function will be called as Example2.Pow, in fact, it is Example2.Pow. 


*JsReplace* on the other hand, gets replaced (inlined) at the call-site. For example:

class Example3 {
	[JsReplace("Math.pow({0}, {1})")]
	public extern static double Pow(double v, double exponent);
}

No function will be emited for Example3.Pow. Instead, at every call site for Example3.Pow, Math.pow is called instead.

This can be a more efficient way to do small expressions, but should be avoided for longer expressions as they will be repeated at every call site.

Warning: You should never access the same parameters twice in an JsReplace expression. 
If find that you need to do this, use JsImport with a function instead.


== Number ==

The type CilJs.JavaScript.Number can be used when you want to have access to JavaScript's native number. 

Providing this type is mainly for semantics and to make it possible to write complex arithmetic in C# without having to go to JavaScript to avoid extra truncations for integers and so on.

Please note that all primitive numbers ((s)byte, (u)int16, (u)int32, float and double) are all mapped directly to JavaScript's number and has
very little or no overhead. The two exceptions are uint64 and int64 which, at runtime has Uint32Array as value. 
